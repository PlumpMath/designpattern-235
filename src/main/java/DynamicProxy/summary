静态代理和动态代理之间的区别：
静态代理，是指程序运行前就已经存在了代理类的字节码文件，代理类和被代理类的关系在运行前就已经确定。
如前面的代理模式和装饰器模式讲述的就是静态代理，一个静态代理类只代理一个具体类。如果需要对实现了同一接口的不同具体类作代理，静态代理需要为每一个具体类创建相应的代理类。

动态代理类的字节码是在程序运行期间动态生成，所以不存在代理类的字节码文件。代理类和被代理类的关系是在程序运行时确定的。
动态代理可以代理多种类，而且具体代理哪种类并非像静态代理那样编译时确定，而是在运行时指定
之所以不传被代理类的实例而是传类对象，是为了与前面静态代理类吻合――被代理对象不由客户端创建而由代理创建，客户端甚至都不需要知道被代理对象的存在。具体传被代理类的实例还是传类对象，并无严格规定。

注意：
1.SubjectProxyHandler定义的是代理行为而非代理类本身。实际上代理类及其实例是在运行时通过反射动态创建出来的。
2.所有生成的动态代理类都是Proxy类的子类。同时也解释了为什么JDK动态代理只能代理实现了接口的类――Java不支持多继承，代理类已经继承了Proxy类，无法再继承其它类。


性能比较：
JDK proxy create time:36064ms
JDK proxy execute time:708ms

cglib proxy create time:395580ms
cglib proxy execute time:1127ms